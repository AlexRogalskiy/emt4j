# Copyright (c) 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
title=The output changed when using the "java.text.NumberFormat" format number with currency between JDK 8 and JDK 11.
description=For the following code:\
BigDecimal value = new BigDecimal("1.99"); \
Locale locale = new Locale("zh_CN"); \
for (String currencyCode :new String[]{"CNY","EUR","USD"} ) { \
NumberFormat format = NumberFormat.getCurrencyInstance(locale); \
Currency currency = Currency.getInstance(currencyCode); \
format.setCurrency(currency); \
String result = format.format(value); \
System.out.println("Result: " + result); \
} \
Output of JDK 8:  \
Result: CNY 1.99  \
Result: EUR 1.99  \
Result: USD 1.99  \
Output of JDK 11: \
Result: CN\u00A5 1.99 \
Result: \u20AC 1.99 \
Result: US$ 1.99
solution=1. Add "-Djava.locale.providers=COMPAT" to the java option so that change default locale date from CLDR to COMPAT(JDK 8 default). \
         2. Avoid using the output of "java.text.NumberFormat.format" to exchange between processes.